%META:TOPICINFO{author="ChrisHoefler" comment="" date="1471444556" format="1.1" reprev="5" version="5"}%
%META:TOPICPARENT{name="JsonSQLPlugin"}%
---+!! Testing !JsonSQLPlugin 

<form method="post" action="%SCRIPTURL{"jsonrpc"}%/jsontest/select">
<input type="hidden" name="fields" value='[{"column": "field1"},{"column": "field2", "alias": "test"}]' />
<input type="hidden" name="from" value='[{"table": "table1", "schema": "MySchema"}]' />
<input type="hidden" name="from" value='{"and": [{ "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },{ "eq": {"field": {"column": "field1"}, "value": "453.6"} },{ "or": [{ "eq": {"field": {"column": field2"}, "value": "field3"} },{ "gt": {"field": {"column": "field3"}, "value": "45"} }]}]}' />
<input type="submit"/>
</form>

<div id="jsonResponse"></div>
<div id="dbResponse"></div>
<div id="dbResponseJoin"></div>

JOIN db_users ON bacterial_strains.entered_by = db_users.user_id
%JQREQUIRE{"jsonrpc"}%
%JQREQUIRE{"render"}%

<div id="result" style="border: solid 2px;"></div>

<script>
function ResultA(genus, species, wiki_name) {
  this._genus = genus;
  this._species = species;
  this._wiki_name = wiki_name;
}

var resultAProto = {
  genus: function() {
    return this._genus;
  },
  species: function() {
    return this._species;
  },
  wiki_name: function() {
    return this._wiki_name;
  }
};

ResultA.prototype = resultAProto;
</script>
<script id="testTmpl" type="text/x-jsrender">
  <span style="font-weight:bold; padding-right: 8em;">Genus:</span>{{:genus}}<br />
  <span style="font-weight:bold; padding-right: 8em;">Species:</span>{{:species}}<br />
  <span style="font-weight:bold; padding-right: 8em;">Entered By:</span>{{:wiki_name}}<br />
  <br />
</script>

<script>
// Compiled template
var tmpl = $.templates("#testTmpl");



// Instantiate View Model hierarchy using constructors
//var testresult = new ResultA("Genus","Species","Wiki Name");

// Render template against person object (instance of Person)
//$("#result").html(tmpl.render(testresult));
</script>
<script>
var myObj =
{
   "fields": [
      {"column": "field1"},
      {"column": "field2", "alias": "test"}
   ],
   "from": [
       {"table": "table1", "schema": "MySchema"}
   ],
   "where": {
      "and": [
          { "eq": {"field": {"column": "field2"}, "value": "Test.Field2"} },
          { "eq": {"field": {"column": "field1"}, "value": "453.6"} },
          { "or": [
              { "eq": {"field": {"column": "field2"}, "value": "field3"} },
              { "gt": {"field": {"column": "field3"}, "value": "45"} }
          ]}
      ]
   }
};

var dbStmt =
{
   "fields": [
      {"column": "*"}
   ],
   "from": [
      {"table": "bacterial_strains"}
   ]
};

var dbStmtJoin =
{
   "fields": [
      {"column": "*"}
   ],
   "joins": [
      {"to": {"table": "bacterial_strains"}, "from": {"table": "db_users"}, "jointype": "inner", "on": {"eq": {"field": {"table": "bacterial_strains", "column": "entered_by"}, "value": {"table": "db_users", "column": "user_id"}}}}

   ]
};

$.jsonRpc(
  "%SCRIPTURL{"jsonrpc"}%",
  {
    namespace: "jsontest",
    method: "select",
    params: {
       jsonQuery: JSON.stringify(myObj),
    },
    error: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(jsonResponse); $("#jsonResponse").text(response) },
    success: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(jsonResponse); $("#jsonResponse").text(response) }
  }
);

$.jsonRpc(
  "%SCRIPTURL{"jsonrpc"}%",
  {
    namespace: "jsondbget",
    method: "select",
    params: {
       jsonQuery: JSON.stringify(dbStmt),
    },
    error: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(jsonResponse); $("#dbResponse").text(response) },
    success: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(jsonResponse); $("#dbResponse").text(response) }
  }
);

$.jsonRpc(
  "%SCRIPTURL{"jsonrpc"}%",
  {
    namespace: "jsondbget",
    method: "select",
    params: {
       jsonQuery: JSON.stringify(dbStmtJoin),
    },
    error: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(JSON.parse(jsonResponse.result), null, '\t'); $("#dbResponseJoin").text(response) },
    success: function(jsonResponse, textStatus, xhr) { var response = JSON.stringify(JSON.parse(jsonResponse.result), null, '\t'); $("#dbResponseJoin").text(response); $("#result").html(tmpl.render(JSON.parse(jsonResponse.result))); }
  }
);
</script>


__Related:__ %SYSTEMWEB%.JsonSQLPlugin
